{"version":3,"file":"static/js/61.d2166194.chunk.js","mappings":"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","sources":["components/Reviews.jsx","../node_modules/nanoid/index.browser.js","service/movieApi.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'service/movieApi';\nimport { nanoid } from 'nanoid';\nimport css from './styles.module.css';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n  useEffect(() => {\n    async function fetchMovieReviews() {\n      const response = await getMovieReviews(movieId);\n      setReviews(response.results);\n    }\n    fetchMovieReviews();\n  }, [movieId]);\n  return (\n    <>\n      {reviews.length > 0 ? (\n        <ul className={css.reviews__list}>\n          {reviews.map(el => {\n            return (\n              <li key={nanoid()}>\n                <b>Author: {el.author}</b>\n                <p>{el.content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p className={css.reviews__errorText}>No reviews yet</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import axios from 'axios';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\n\nconst API_KEY = '48efdd88d1650cc055b0f5a157a41228';\n\nexport async function getMovies(searchQuery) {\n  const BASE_URL = 'https://api.themoviedb.org/3/search/movie?';\n  try {\n    Loading.pulse();\n    const response = await axios.get(BASE_URL, {\n      params: {\n        api_key: API_KEY,\n        query: searchQuery,\n        page: 1,\n        include_adult: false,\n      },\n    });\n    console.log(response.data.total_results);\n    if (searchQuery && response.data.total_results === 0) {\n      return Notify.failure(`No movies with name ${searchQuery}`);\n    }\n\n    return response.data.results;\n  } catch (e) {\n    Notify.failure('Something went wrong...');\n    console.log(e);\n  } finally {\n    Loading.remove();\n  }\n}\n\nexport async function getTrendMovies() {\n  const BASE_URL = 'https://api.themoviedb.org/3/trending/movie/day';\n  try {\n    Loading.pulse();\n    const response = await axios.get(BASE_URL, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (e) {\n    Notify.failure('Something went wrong...');\n    console.log(e);\n  } finally {\n    Loading.remove();\n  }\n}\n\nexport async function getFullInfo(id) {\n  try {\n    Loading.pulse();\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    Notify.failure('Something went wrong...');\n    console.log(error);\n  } finally {\n    Loading.remove();\n  }\n}\n\nexport async function getMovieCast(id) {\n  try {\n    Loading.pulse();\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/credits`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    Notify.failure('Something went wrong...');\n    console.log(error);\n  } finally {\n    Loading.remove();\n  }\n}\n\nexport async function getMovieReviews(id) {\n  try {\n    Loading.pulse();\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/reviews`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    Notify.failure('Something went wrong...');\n    console.log(error);\n  } finally {\n    Loading.remove();\n  }\n}\n"],"names":["useState","reviews","setReviews","movieId","useParams","useEffect","getMovieReviews","response","results","fetchMovieReviews","length","className","css","map","el","author","content","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","nanoid","API_KEY","getMovies","searchQuery","Loading","axios","params","api_key","query","page","include_adult","console","log","data","total_results","Notify","getTrendMovies","getFullInfo","getMovieCast"],"sourceRoot":""}